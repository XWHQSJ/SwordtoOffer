//
// Created by Wanhui on 2/20/20.
//

#ifndef SWORDTOOFFER_CUTTINGROPEII_H
#define SWORDTOOFFER_CUTTINGROPEII_H

/*
 * 剑指offer 14-2 剪绳子II
 *
 * 给你一根长度为 n 的绳子，
 * 请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），
 * 每段绳子的长度记为 k[0],k[1]...k[m] 。
 * 请问 k[0]*k[1]*...*k[m] 可能的最大乘积是多少？
 * 例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，
 * 此时得到的最大乘积是18。
 *
 * 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
 *
 * 示例 1：
 *
 * 输入: 2
 * 输出: 1
 * 解释: 2 = 1 + 1, 1 × 1 = 1
 *
 * 示例 2:
 *
 * 输入: 10
 * 输出: 36
 * 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
 *
 * 提示：
 * 2 <= n <= 1000
 * */


class Solution14_2 {
public:
    /*
     * 本题思路与14-1思路完全相同，不同的是本题需要考虑整数溢出问题。
     * 动态规划使用语言类型中的大整数处理，
     * 或者贪心算法手写求幂函数，返回结果取模数等都可以解决。
     * 手写求幂或者使用贪心算法直接计算的时间复杂度都是O(n)，
     * 而动态规划是O(n^2)。
     * 下面代码思路与14-1中贪心算法思路相同，只是将求幂函数与计算过程混合。
     * 当n小于4时，返回n-1；当n等于4时返回n；当n大于4时，n=3a+b,res=3^a*b的本质相同，
     * 要注意的是此时余数不能为0，所以余数变为2,3,4。
     * 当然while循环中n的判断条件也可是n>=3，与上一题余数保持相同为0,1,2，
     * 但最后计算结果时需要做一次判断。
     * */
    int cuttingRope(int n);
};


#endif //SWORDTOOFFER_CUTTINGROPEII_H
