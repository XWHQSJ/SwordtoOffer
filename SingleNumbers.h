//
// Created by Wanhui on 3/22/20.
//

#ifndef SWORDTOOFFER_SINGLENUMBERS_H
#define SWORDTOOFFER_SINGLENUMBERS_H

/*
 * 剑指offer 56-I 数组中数字出现的次数
 *
 * 一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。
 * 请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。
 *
 * 示例 1：
 *
 * 输入：nums = [4,1,4,6]
 * 输出：[1,6] 或 [6,1]
 *
 * 示例 2：
 *
 * 输入：nums = [1,2,10,4,1,4,3,3]
 * 输出：[2,10] 或 [10,2]
 *
 * 限制：
 * 2 <= nums <= 10000
 * */


#include <vector>

class Solution56_1 {
public:
    /*
     * 异或运算
     *
     * 异或运算的一个性质是：任何一个数字异或本身等于0，异或0等于它本身。
     * 如果一个数组中除了一个数出现一次，其他都出现两次，那么将数组中的数从头到尾依次异或，
     * 最终的结果必然是那个只出现过一次的数。
     *
     * 而题目的数组中有两个只出现一次的数，其他都出现两次。
     * 要实现上述的操作，就需要将这两个只出现一次的数分成两组再分别进行异或操作。
     *
     * 如何分成两组？对题目数组中的数从头到尾进行异或，因为有两个不相等的数，则最终结果肯定不为0。
     * 最终结果的二进制中必然有某些位是1，而对应在该位，不同的两个数必然一个为1一个为0。
     *
     * 以此方法进行分界，取最终结果右数第一个1，对数组中的数进行划分，再分别对两数组中的数进行异或，
     * 则两数组最后的异或结果就是题目所求的数组。
     * */
    std::vector<int> singleNumbers(std::vector<int> &nums);
};


#endif //SWORDTOOFFER_SINGLENUMBERS_H
