//
// Created by Wanhui on 3/23/20.
//

#ifndef SWORDTOOFFER_REVERSEWORDS_H
#define SWORDTOOFFER_REVERSEWORDS_H

/*
 * 剑指offer 58-I 翻转单词顺序
 *
 * 输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。
 * 为简单起见，标点符号和普通字母一样处理。
 * 例如输入字符串"I am a student. "，则输出"student. a am I"。
 *
 * 示例 1：
 *
 * 输入: "the sky is blue"
 * 输出: "blue is sky the"
 *
 * 示例 2：
 *
 * 输入: "  hello world!  "
 * 输出: "world! hello"
 * 解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
 *
 * 示例 3：
 *
 * 输入: "a good   example"
 * 输出: "example good a"
 * 解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 *
 * 说明：
 * 无空格字符构成一个单词。
 * 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
 * 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 * */


#include <string>

class Solution58_1 {
public:
    /*
     * 栈存储 O(n) O(n)
     *
     * 定义栈存储字符串中的所有单词，定义临时字符串存放当前单词。
     * 遍历字符串中的字符，当该字符不为空字符或结束字符时，就将该字符加入临时字符串中，
     * 当字符为空字符且当前临时字符串的大小不为0时，表示临时字符串存储的单词结束，将该单词存入栈中。
     * 遍历结束后，需要判断当前临时字符串大小是否为0，不为0表示最后一个单词要存入栈中。
     * 对单词栈进行遍历，取栈顶单词和空字符进行单词拼接，拼接结束后去掉最后多余的一个空字符。
     * */
    std::string reverseWords(std::string s);

    /*
     * 原地翻转两次 O(n) O(1)
     *
     * 原理：
     * 将字符串s的所有字符全部翻转，再将每个单词的字符翻转。
     *
     * 但要考虑首尾的空字符和单词直接的空字符，所以需要先对字符串s进行预处理。
     * 先将字符串s翻转，接着将首尾空字符删除，再将单词间多余1个的空字符删除到1个空字符。
     * 最后对预处理后的字符串中的每个单词的字符进行翻转。
     * */
    std::string reverseWords2(std::string s);
};


#endif //SWORDTOOFFER_REVERSEWORDS_H
